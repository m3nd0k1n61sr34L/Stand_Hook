
if not async_http.have_access() and not SCRIPT_SILENT_START then
    util.toast("You don't have internet access enabled for MendoHook. The script wont work, please enable internet access first.")
    util.stop_script()
end

if not filesystem.exists(filesystem.store_dir() .. "\\MendoHook") then
    filesystem.mkdir(filesystem.store_dir() .. "\\MendoHook")
end

if not filesystem.exists(filesystem.store_dir() .. "\\MendoHook\\webhook_url.txt") then
    local file = io.open(filesystem.store_dir() .. "\\MendoHook\\webhook_url.txt", "w")
    file:close()
end

--writes the webhook URL to the specified path--
function write_url_to_file(file_path, webhook_url)
    local file = io.open(file_path, "w")
    file:write(webhook_url)
    file:close()
    util.toast("Webhook URL successfully written to file.\nRestarting script to apply the webhook URL.")
end


--getting the webhook URL from the webhook_url txt--
local file = io.open(filesystem.store_dir() .. "\\MendoHook\\webhook_url.txt", "r")
local webhook_url = file:read("a")
file:close()

--if the URL does not start with '/api' and also not with 'https://discord.com/api/webhooks' then delete the insides of the file--
if string.len(webhook_url) > 0 and not string.startswith(webhook_url, "/api") and not string.startswith(webhook_url, "https://discord.com/api/webhooks") then
    util.toast("You have set an invalid webhook URL,\nDeleting webhook")
    local file = io.open(filesystem.store_dir() .. "\\MendoHook\\webhook_url.txt", "w")
    file:close()
end

--if no URL is set then make a new action that u can set your webhook URL--
if string.len(webhook_url) == 0 then
    util.toast("No webhook URL set, set this with the option 'Set Webhook Url'\nDon't share your webhook URL")
    menu.my_root():action("Set Webhook Url", {"setwebhookurl"}, "!Warning!: don't share your webhook URL.\nThis will write your webhook URL to a file.", function()
        menu.show_command_box("setwebhookurl ")
    end, function(webhook_url)
        if string.startswith(webhook_url, "/api") then
            write_url_to_file(filesystem.store_dir() .. "\\MendoHook\\webhook_url.txt", webhook_url)
            util.restart_script()
        elseif string.startswith(webhook_url, "https://discord.com/api/webhooks") then
            webhook_url = string.sub(webhook_url, string.lfind(webhook_url, "/api"))
            write_url_to_file(filesystem.store_dir() .. "\\MendoHook\\webhook_url.txt", webhook_url)
            util.restart_script()
        else
            util.toast("Invalid URL make sure it starts with: 'https://discord.com/api/webhooks' or '/api/webhooks'")
        end
    end)
else
    --sets a new webhook URL if u want to change it--
    menu.my_root():action("Set New Webhook URL", {"newwebhookurl"}, "Lets you set a new webhook URL if you want to change it, !Warning!: don't share your webhook URL", function()
        menu.show_command_box("newwebhookurl ")
    end, function(webhook_url)
        if string.startswith(webhook_url, "/api") then
            write_url_to_file(filesystem.store_dir() .. "\\MendoHook\\webhook_url.txt", webhook_url)
            util.restart_script()
        elseif string.startswith(webhook_url, "https://discord.com/api/webhooks") then
            webhook_url = string.sub(webhook_url, string.lfind(webhook_url, "/api"))
            write_url_to_file(filesystem.store_dir() .. "\\MendoHook\\webhook_url.txt", webhook_url)
            util.restart_script()
        else
            util.toast("Invalid URL make sure it starts with: 'https://discord.com/api/webhooks' or '/api/webhooks'")
        end
    end)
end

--stuff for detections--
local detections_log = {}

local detection_excludes = { -- make sure to have these strings for the current menu language
	lang.get_localised(lang.find("Classifications")),
	lang.get_localised(lang.find("Stand User Identification")),
	lang.get_localised(lang.find("Any Detection")),
}

local detection_types = menu.ref_by_path("Online>Protections>Detections"):getChildren():map(|d| -> lang.get_localised(d.menu_name)):filter(|d| -> not d in detection_excludes):reorder()

--option excludes--
local send_detections_to_webhook = true
local send_new_session_to_webhook = true
local send_chat_massages_to_webhook = true

--customize bools--
local each_thing_own_box = true
local each_value_own_box = false
local one_big_box = false
local no_box = false
local bold_titles = true

-------------
--FUNCTIONS--
-------------
--sends detections/classifications, new session and chat messages--
function send_to_webhook(pid, detection, new_session, chat_message)
    local author_name = ""
    local description = ""

    if pid and detection and not new_session and not chat_message and not difference then
        if not send_detections_to_webhook then
            return
        end
        local player_name = players.get_name(pid)
        local RID = players.get_rockstar_id(pid)
        local player_tags = players.get_tags_string(pid)
        player_tags = (string.len(player_tags) > 0) and player_tags or "No tags found"
        local classifications = menu.ref_by_path("Players>" .. players.get_name_with_tags(pid)):getChildren()[2]:getChildren()
        local classifications_string = ""
        for classifications as classification do
            if classifications_string == "" then
                classifications_string = lang.get_localised(menu.get_menu_name(classification))
            else
                classifications_string = classifications_string .. ", " .. lang.get_localised(menu.get_menu_name(classification))
            end
        end

        author_name = "Detection"

        if each_thing_own_box then
            description = "```\\nName: " .. player_name .. "```\\n" ..
                          "```\\nDetection: " .. detection .. "```\\n" ..
                          "```\\nRID: " .. RID .. "```\\n" ..
                          "```\\nTags: " .. player_tags .. "```\\n" ..
                          "```\\nClassifications: " .. classifications_string .. "```\\n"
        elseif each_value_own_box then
            if bold_titles then
                description = "**Name:** ```\\n" .. player_name .. "```\\n" ..
                              "**Detection:** ```\\n" .. detection .. "```\\n" ..
                              "**RID:** ```\\n" .. RID .. "```\\n" ..
                              "**Tags:** ```\\n" .. player_tags .. "```\\n" ..
                              "**Classifications:** ```\\n" .. classifications_string .. "```\\n"
            else
                description = "Name: ```\\n" .. player_name .. "```\\n" ..
                              "Detection: ```\\n" .. detection .. "```\\n" ..
                              "RID: ```\\n" .. RID .. "```\\n" ..
                              "Tags: ```\\n" .. player_tags .. "```\\n" ..
                              "Classifications: ```\\n" .. classifications_string .. "```\\n"
            end
        elseif one_big_box then
            description = "```\\nName: " .. player_name .. "\\n" ..
                          "Detection: " .. detection .. "\\n" ..
                          "RID: " .. RID .. "\\n" ..
                          "Tags: " .. player_tags .. "\\n" ..
                          "Classifications: " .. classifications_string .. "```\\n"
        elseif no_box then
            if bold_titles then
                description = "**Name:** " .. player_name .. "\\n" ..
                              "**Detection:** " .. detection .. "\\n" ..
                              "**RID:** " .. RID .. "\\n" ..
                              "**Tags:** " .. player_tags .. "\\n" ..
                              "**Classifications:** " .. classifications_string .. "\\n"
            else
                description = "Name: " .. player_name .. "\\n" ..
                              "Detection: " .. detection .. "\\n" ..
                              "RID: " .. RID .. "\\n" ..
                              "Tags: " .. player_tags .. "\\n" ..
                              "Classifications: " .. classifications_string .. "\\n"
            end
        end

    elseif not pid and not detection and new_session and not chat_message then
        if not send_new_session_to_webhook then
            return
        end
        author_name = "New Session"
        local player_list = players.list(false, true, true)
        if one_big_box then
            description = "```\\n"
        end
        if next(player_list) != nil then
            for i, pid in player_list do
                local player_name = players.get_name(pid)
                local RID = players.get_rockstar_id(pid)
                local player_tags = players.get_tags_string(pid)
                if string.len(player_tags) <= 0 then
                    player_tags = "No tags found"
                end

                if each_thing_own_box or each_value_own_box then
                    description = description .. "```\\nName: " .. player_name .. "\\n" ..
                                  "Tags: " .. player_tags .. "\\n" ..
                                  "RID: " .. RID .. "```\\n\\n"
                elseif one_big_box then
                    description = description .. "\\nName: " .. player_name .. "\\n" ..
                                  "Tags: " .. player_tags .. "\\n" ..
                                  "RID: " .. RID .. "\\n\\n"
                elseif no_box then
                    if bold_titles then
                        description = description .. "**Name:** " .. player_name .. "\\n" ..
                                      "**Tags:** " .. player_tags .. "\\n" ..
                                      "**RID:** " .. RID .. "\\n\\n"
                    else
                        description = description .. "Name: " .. player_name .. "\\n" ..
                                      "Tags: " .. player_tags .. "\\n" ..
                                      "RID: " .. RID .. "\\n\\n"
                    end
                end
            end
        else
            if each_thing_own_box or each_value_own_box then
                description = "```\\nNo Players Found.```"
            elseif one_big_box then
                description = "```\\nNo Players Found."
            elseif no_box then
                description = "No Players Found."
            end
        end

        if one_big_box then
            description = description .. "```"
        end

    elseif pid and not detection and not new_session and chat_message then
        if not send_chat_massages_to_webhook then
            return
        end
        author_name = "Chat"
        local player_name = players.get_name(pid)
        if each_thing_own_box or one_big_box then
            description = "```\\n" .. player_name .. ": " .. chat_message .. "```\\n"
        elseif each_value_own_box then
            if bold_titles then
                description = "**" .. player_name .. ":**"  .. "```\\n" .. chat_message .. "```\\n"
            else
                description = player_name .. "```\\n" .. ": " .. chat_message .. "```\\n"
            end
        elseif no_box then
            if bold_titles then
                description = "**" .. player_name .. ":**" .. chat_message .. "\\n"
            else
                description = player_name .. ": " .. chat_message .. "\\n"
            end
        end
    end

    local body = [[
        {
            "embeds": [
              {
                "description": "]] .. description .. [[",
                "timestamp": "]] .. os.date("!%Y-%m-%dT%XZ") .. [[",
                "author": {
                  "name": "]] .. author_name .. [[",
                  "icon_url": "https://raw.githubusercontent.com/m3nd0k1n61sr34L/Stand_Hook/main/mendo%20lego%20skull.jpg"
                }
              }
            ],
            "username": "MendoHook",
            "avatar_url": "https://raw.githubusercontent.com/m3nd0k1n61sr34L/Stand_Hook/main/mendo%20lego%20skull.jpg"
        }
    ]]

    async_http.init("discord.com", webhook_url)
    async_http.set_post("application/json", body)
    async_http.dispatch()
end

local function new_detection(pid, name)
	if not detections_log[pid] then return false end
	if name in detections_log[pid] then return false end
	detections_log[pid]:insert(name)
	return true
end

-----------
--OPTIONS--
-----------
local excludes_list = menu.my_root():list("Excludes")
--if on then it will send detections if off it wont--
excludes_list:toggle("Send Detections To Webhook", {}, "", function(on)
    send_detections_to_webhook = on
end, true)

--if on then it will send when a new session is joined with the players in the session with the tags for each player, will also ouput if ur in story mode or not--
excludes_list:toggle("Send New Session To Webhook", {}, "", function(on)
    send_new_session_to_webhook = on
end, true)

--if on then it will send chat messages to the webhook--
excludes_list:toggle("Send Chat To Webhook", {}, "", function(on)
    send_chat_massages_to_webhook = on
end, true)

-------------
--Customize--
-------------
local customize_list = menu.my_root():list("Customize")
local toggle1 = nil
local toggle2 = nil
local toggle3 = nil
local toggle4 = nil

toggle1 = customize_list:toggle("Each Line Has Its Own Box", {}, "", function(on)
    if on then
        if toggle2.value then
            toggle2:trigger()
        elseif toggle3.value then
            toggle3:trigger()
        elseif toggle4.value then
            toggle4:trigger()
        end
    end

    if not on and not toggle2.value and not toggle3.value and not toggle4.value then
        toggle1:trigger()
        util.toast("You need to have atleast one style selected")
    end
    each_thing_own_box = on
end, true)

toggle2 = customize_list:toggle("Each Value Has Its Own Box", {}, "", function(on)
    if on then
        if toggle1.value then
            toggle1:trigger()
        elseif toggle3.value then
            toggle3:trigger()
        elseif toggle4.value then
            toggle4:trigger()
        end
    end

    if not on and not toggle1.value and not toggle3.value and not toggle4.value then
        toggle1:trigger()
        util.toast("You need to have atleast one style selected")
    end
    each_value_own_box = on
end)

toggle3 = customize_list:toggle("One Big Box", {}, "", function(on)
    if on then
        if toggle1.value then
            toggle1:trigger()
        elseif toggle2.value then
            toggle2:trigger()
        elseif toggle4.value then
            toggle4:trigger()
        end
    end

    if not on and not toggle1.value and not toggle2.value and not toggle4.value then
        toggle1:trigger()
        util.toast("You need to have atleast one style selected")
    end
    one_big_box = on
end)

toggle4 = customize_list:toggle("No Box", {}, "", function(on)
    if on then
        if toggle1.value then
            toggle1:trigger()
        elseif toggle2.value then
            toggle2:trigger()
        elseif toggle3.value then
            toggle3:trigger()
        end
    end

    if not on and not toggle1.value and not toggle2.value and not toggle3.value then
        toggle1:trigger()
        util.toast("You need to have atleast one style selected")
    end
    no_box = on
end)

customize_list:toggle("Bold Titles", {}, "Only works if 'Each Value Has Its Own Box' or 'No Box' is selected.", function(on)
    bold_titles = on
end, true)

--if on it checks for new session, chat message and detections--
local values = {}
webhook_toggle = menu.my_root():toggle("Webhook", {}, "", function(on)
    if on then
        --does something when the transition is finished (so a new session), in this case we send info too the webhook--
        new_session_handler = util.on_transition_finished(function()
            send_to_webhook(false, false, true, false)
        end)

        --does something when a new chat message is send in the game chat--
        new_chat_handler = chat.on_message(function(packet_sender, message_sender, text, team_chat)
            send_to_webhook(message_sender, false, false, text)
        end)

        --instead of checking the log file, using this fancy way to listen for detections (Note: it won't include detections added by other scripts, such as JinxScript)--
		new_detection_handler = players.on_flow_event_done(function(pid, name, extra)
			name = lang.get_localised(name)
			if not name in detection_types then return end

			if extra then
				name ..= $" ({extra})"
			end

			if new_detection(pid, name) then
				send_to_webhook(pid, name, false, false)
			end
		end)
    end
    if not on then
        --stop the respective handlers--
        util.remove_handler(new_session_handler)
        util.remove_handler(new_chat_handler)
		util.remove_handler(new_detection_handler)
    end
end)

--------
--LOGO--
--------
--logo loading when script starts--
if SCRIPT_MANUAL_START and not SCRIPT_SILENT_START then
    util.create_thread(function()
        local logo = directx.create_texture(filesystem.resources_dir() .. "\\MendoHook\\MendoHook_logo.png")

        local l = -100
        while l <= 90 do
            for j = 1, 195, 5 do
                directx.draw_texture(logo, 0.10, 0.10, 0.5, 0.5, l/1000, 0.73, 0, {r = 1, g = 1, b = 1, a = j/255})
                util.yield(0)
                l = l + 5
            end
        end

        for i = 1, 220 do
            directx.draw_texture(logo, 0.10, 0.10, 0.5, 0.5, 0.09, 0.73, 0, {r = 1, g = 1, b = 1, a = 1})
            util.yield(0)
        end

        local k = 90
        while k >= -10 do
            for j = 195, 1, -5 do
                directx.draw_texture(logo, 0.10, 0.10, 0.5, 0.5, k/1000, 0.73, 0, {r = 1, g = 1, b = 1, a = j/255})
                util.yield(0)
                k = k - 5
            end
        end
    end)
end

players.add_command_hook(function(pid) detections_log[pid] = {} end)
players.on_leave(function(pid) detections_log[pid] = nil end)